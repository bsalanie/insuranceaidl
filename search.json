[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "InsuranceAI",
    "section": "",
    "text": "We read the data and we convert the variables to their correct types:"
  },
  {
    "objectID": "index.html#selecting-variables",
    "href": "index.html#selecting-variables",
    "title": "InsuranceAI",
    "section": "selecting variables",
    "text": "selecting variables\nWe will work with a subset of the variables. Our endogeneous variables will be Comprehensive coverage for the choice of contract \\(y_1\\) and Not at fault for the occurrence of a claim at fault \\(y_2\\). We also use the variable Duration to weight the observations, and 9 categorical covariates.\n\nX.describe()\n\n\n\n\n\n  \n    \n      \n      Group\n      Male\n      Occupation\n      Region\n      Renault\n      Age category car\n      Age category insuree\n      Car use\n      Zone\n    \n  \n  \n    \n      count\n      6333\n      6333\n      6333\n      6333\n      6333\n      6333\n      6333\n      6333\n      6333\n    \n    \n      unique\n      6\n      2\n      8\n      10\n      2\n      12\n      9\n      4\n      5\n    \n    \n      top\n      3\n      1\n      2\n      5\n      0\n      11\n      1\n      2\n      6\n    \n    \n      freq\n      1272\n      3971\n      2865\n      1019\n      5046\n      1100\n      1354\n      2876\n      2626\n    \n  \n\n\n\n\n\nlhs_vars = pd.DataFrame({\n    'Comprehensive coverage': y1, \n    'Claim at fault': y2, 'Duration': w\n})\nlhs_vars.describe()\n\n\n\n\n\n  \n    \n      \n      Comprehensive coverage\n      Claim at fault\n      Duration\n    \n  \n  \n    \n      count\n      6333.000000\n      6333.000000\n      6333.000000\n    \n    \n      mean\n      0.368704\n      0.068530\n      0.630466\n    \n    \n      std\n      0.482491\n      0.252673\n      0.338334\n    \n    \n      min\n      0.000000\n      0.000000\n      0.002740\n    \n    \n      25%\n      0.000000\n      0.000000\n      0.304110\n    \n    \n      50%\n      0.000000\n      0.000000\n      0.657534\n    \n    \n      75%\n      1.000000\n      0.000000\n      0.997260\n    \n    \n      max\n      1.000000\n      1.000000\n      0.997260\n    \n  \n\n\n\n\nThe matrix of \\((y_1,y_2)\\) is as follows:\n\npd.crosstab(lhs_vars['Comprehensive coverage'], lhs_vars['Claim at fault'])\n\n\n\n\n\n  \n    \n      Claim at fault\n      0\n      1\n    \n    \n      Comprehensive coverage\n      \n      \n    \n  \n  \n    \n      0\n      3696\n      302\n    \n    \n      1\n      2203\n      132\n    \n  \n\n\n\n\n\nfig, ax = plt.subplots()\nax.hist(w, color='red', label='w', bins=20)\nax.set(xlabel=\"Proportion of the year covered\", title=\"Weights\")\nax.legend()\nplt.show()"
  },
  {
    "objectID": "index.html#first-neural-network",
    "href": "index.html#first-neural-network",
    "title": "InsuranceAI",
    "section": "first neural network",
    "text": "first neural network\nWe fit a simple neural network to \\(y_1\\), tentatively:\n\nmodel = keras.Sequential([\n    layers.Dense(1, activation=\"sigmoid\", input_dim=9),\n])\nmodel.compile(optimizer=\"rmsprop\",\n              loss=\"binary_crossentropy\",\n              metrics=[\"accuracy\"])\nmodel.fit(X.values[:3200,:], y1.values[:3200],epochs=5, batch_size=128)\n\nEpoch 1/5\n25/25 [==============================] - 0s 441us/step - loss: 5.2681 - accuracy: 0.3491\nEpoch 2/5\n25/25 [==============================] - 0s 400us/step - loss: 4.7489 - accuracy: 0.3444\nEpoch 3/5\n 1/25 [>.............................] - ETA: 0s - loss: 4.8325 - accuracy: 0.3047\n\n\n2022-11-13 18:52:45.935433: W tensorflow/core/platform/profile_utils/cpu_utils.cc:128] Failed to get CPU frequency: 0 Hz\n\n\n25/25 [==============================] - 0s 409us/step - loss: 4.2860 - accuracy: 0.3356\nEpoch 4/5\n25/25 [==============================] - 0s 399us/step - loss: 3.8419 - accuracy: 0.3203\nEpoch 5/5\n25/25 [==============================] - 0s 405us/step - loss: 3.4149 - accuracy: 0.2997\n\n\n<keras.callbacks.History>"
  },
  {
    "objectID": "utils.html",
    "href": "utils.html",
    "title": "utils",
    "section": "",
    "text": "We start by loading the dataset from the FFSA 1989 survey — only beginning drivers. The data has 6,333 insurees. Each observation has 58 variables:\n\n(AG25) whether the insuree is below 25 (1) or not (2)\n(AGE) the age of the insuree in years\n(AGEC) the age of the driver in years (9 if the driver was the insuree)\n(ALLE) German car: 1 yes, 0 no\n(AMER) American car: 1 yes, 0 no\n(ANCC) how old the driver license is (1 for less than 3, 2 for more, 9 incomplete, 0 missing)\n(CFDO) the nature of the deductible (1 fixed, 2 proportional, 0 no deductible)\n(CFVO) whether the theft guarantee comes with a deductible (1 yes, 2 no, 9 not insured against theft)\n(CGAR) compulsory insurance (0 is basic, 1 with theft, 2 with fire, 3 =1+2, 4 with windows, 5=1+4, 6=2+4, 7=1+2+4)\n(CGDO) comprehensive insurance (0 none, 1 no deductible, 2 with deductible except if collision, 3 with deductible always, 4 others)\n(CIDA) percentage at fault for claims smaller than 25,000FF: 0 = 0%, 1=25%, 2=50%, 3=75%, 4=100%, 9=incomplete, 99=missing.\n(CITR) Citroën car: 1 yes, 0 no\n(CODC) driver is the insured (1 yes, 2 no, 9 ncomplete, 0 missing)\n(CODE) accident (0 if none, 30+ if an accident)\n(CRES) responsibility (1 total, 2 none, 3 partial, 0 missing, 9 incomplete)\n(CSOC) insurance company code\n(DCIR) year the car started circulating\n(DEPT) département where the car is registered\n(DNAI) year of birth of insuree\n(FDOS) claim processing code (1 done, 2 in process, 0 missing)\n(FRAN) 1 if French car but not Citroën-Peugeot-Renault, 0 otherwise\n(GROUP) group: from 1 to 6\n(GSIN) guarantee activated by claim (1 compulsory or comprehensive, 2 theft, 3 fire, 4 windows, 9 missing, 0 ???)\n(HOM) 1 if insuree is male, otherwise 0\n(INDACCI) 1 if no accident at fault, 0 otherwise\n(ITAL) Italian car: 1 yes, 0 no\n(KVEH) number of cars in claim, including the insuree’s (0 missing, 9 incomplete)\n(LIEU) département of claim (99 incomplete, 0 missing)\n(MFDO) deductible as percentage of claim value, or as amount if fixed (0 missing)\n(MFVO) deductible for theft (0 missing)\n(MIDA) reimbursement for claim (0 missing)\n(MODR) how the claim was paid (1 interinsurers, 2 no, 0 missing)\n(MSIN) the total amount of the claim (0 missing)\n(MTRC) the amount covered by the compulsory guarantee (0 missing)\n(NATS) the nature of the claim (1 material, 2 personal or both, 0 missing)\n(NBACCI) the number of claims at fault\n(NORD) an identifier\n(NSEQ) another one\n(PBAS) the basic premium (= [45]/[51]*100)\n(PEUG) Peugeot car: 1 yes, 0 no\n(PFIS) car fiscal horsepowers (3 a 8)\n(PNET) total premium, after bonus/malus, net of taxes\n(POID) percentage of the year covered by insurance\n(PROF) occupation (1 shopowner or crafts, 2 salaried, 3 civil servant, 4 farmer, 5 others, 6 retired, 7 other w/o a job, 8 unknown)\n(QSIN) number of claims in the year (9 missing)\n(RCDR) premium for compulsory coverage after bonus, net of taxes\n(REG) region (1 is Bourgogne-Franche Comté, 2 is Bassin Parisien W, 3 is PACA, 4 is Centre W, 5 is Grand W, 6 is SW, 7 is Ile de France, 8 is Rhône-Alpes, 9 is Est, 10 is Nord)\n(RENA) Renault car: 1 yes, 0 no\n(SCLA) class of car (how expensive, 0 to 4)\n(SEXE) gender (1 male, 2 female)\n(SGRP) real group of the car (4 to 13)\n(TMAJ) bonus/malus (basis 100)\n(TRACIR) based on [16]; is 11 if car started circulating before 1978, 10 if in 1978 or 1979, else 1989-[16]\n(TRAGE) age category, based on [2]. Is 0 if [2] is 18 or 19, 1 to 4 if 20 to 23, 5 if 24 or 25, 6 if 26 to 30, 7 if 31 to 45, then 8.\n(TRAPBAS) category of basic premium, based on [38]. 1 to 6 with breaks at 1,100; 1,400; 1,800; 2,300; and 2,900\n(TRES) percentage at fault if shared responsibility (0 missing)\n(USAG) main usage of car; 1: work, 2: home-to-work, 3: private use, 4: unknown\n\n\nsource\n\nread_data\n\n read_data (dataset:str)\n\nReads the dataset selected and returns a clean Pandas dataframe\n\n\n\n\nType\nDetails\n\n\n\n\ndataset\nstr\n“j88” or “jpropre”\n\n\nReturns\nDataFrame\na clean data frame\n\n\n\n\nsource\n\n\nselect_variables\n\n select_variables (data:pandas.core.frame.DataFrame)\n\nreturns the y variables, the weights, and the X covariates\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndata\nDataFrame\nthe Pandas data frame\n\n\nReturns\ntyping.Tuple[pandas.core.series.Series, pandas.core.series.Series, pandas.core.series.Series, pandas.core.frame.DataFrame]\ny1, y2, w, X"
  }
]